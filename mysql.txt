Select

1. Recyclable and Low Fat Products
SELECT product_id 
FROM Products
WHERE low_fats='y' and recyclable='y';

2. Find Customer Referee
SELECT name
FROM Customer
WHERE referee_id!=2;

3. Big countries
SELECT name,population,area
FROM World
WHERE area>=3000000 
OR population>=25000000;

4. Article Views I
SELECT DISTINCT author_id AS id
FROM Views
WHERE author_id=viewer_id
ORDER BY id ASC;

5. Invalid Tweets
SELECT tweet_id
FROM Tweets
WHERE length(content)>15;

Basic Joins
6. Replace Employee ID With The Unique Identifier
SELECT EmployeeUNI.unique_id, Employees.name
FROM Employees
LEFT JOIN EmployeeUNI ON Employees.id = EmployeeUNI.id

7. Proudt Sales Analysis 
SELECT p.product_name, s.year, s.price
FROM Sales s
JOIN Product p ON s.product_id = p.product_id;

8. Customer Who Visited but Did Not Make Any Transactions
SELECT v.customer_id, COUNT(t.visit_id) AS count_no_trans
FROM Visits v
LEFT JOIN Transactions t ON v.visit_id = t.visit_id
WHERE t.visit_id IS NULL
GROUP BY v.customer_id;

9. Rising Temperature
SELECT w1.id
FROM Weather w1
JOIN Weather w2 ON DATEDIFF(w1.recordDate, w2.recordDate) = 1
WHERE w1.temperature > w2.temperature;

10. Average Time of Process per Machinen
SELECT machine_id, ROUND(AVG(end_time - start_time), 3) AS processing_time
FROM (
    SELECT machine_id, process_id,
           MAX(CASE WHEN activity_type = 'start' THEN timestamp END) AS start_time,
           MAX(CASE WHEN activity_type = 'end' THEN timestamp END) AS end_time
    FROM Activity
    GROUP BY machine_id, process_id
) AS subquery
GROUP BY machine_id;

11. Employee Bonus
SELECT e.name, b.bonus
FROM Employee e
LEFT JOIN Bonus b ON e.empId = b.empId
WHERE b.bonus < 1000 OR b.bonus IS NULL;

12. Students and Examinations
SELECT p.product_name, s.year, s.price
FROM Sales s
JOIN Product p ON s.product_id = p.product_id;

13. Managers with at Least 5 Direct Reports
SELECT name
FROM Employee
WHERE id IN (
    SELECT managerId
    FROM Employee
    GROUP BY managerId
    HAVING COUNT(id) >= 5
);

14. Confirmation Rate
SELECT 
    Signups.user_id,
  s  IFNULL(
        ROUND(
            SUM(CASE WHEN Confirmations.action = 'confirmed' THEN 1 ELSE 0 END) / COUNT(Confirmations.user_id),
            2
        ),
        0.00
    ) AS confirmation_rate
FROM 
    Signups
LEFT JOIN 
    Confirmations ON Signups.user_id = Confirmations.user_id
GROUP BY 
    Signups.user_id;



Basic Joins
6. Replace Employee ID With The Unique Identifier
SELECT EmployeeUNI.unique_id, Employees.name
FROM Employees
LEFT JOIN EmployeeUNI ON Employees.id = EmployeeUNI.id

7. Proudt Sales Analysis 
SELECT p.product_name, s.year, s.price
FROM Sales s
JOIN Product p ON s.product_id = p.product_id;

8. Customer Who Visited but Did Not Make Any Transactions
SELECT v.customer_id, COUNT(t.visit_id) AS count_no_trans
FROM Visits v
LEFT JOIN Transactions t ON v.visit_id = t.visit_id
WHERE t.visit_id IS NULL
GROUP BY v.customer_id;

9. Rising Temperature
SELECT w1.id
FROM Weather w1
JOIN Weather w2 ON DATEDIFF(w1.recordDate, w2.recordDate) = 1
WHERE w1.temperature > w2.temperature;

10. Average Time of Process per Machinen
SELECT machine_id, ROUND(AVG(end_time - start_time), 3) AS processing_time
FROM (
    SELECT machine_id, process_id,
           MAX(CASE WHEN activity_type = 'start' THEN timestamp END) AS start_time,
           MAX(CASE WHEN activity_type = 'end' THEN timestamp END) AS end_time
    FROM Activity
    GROUP BY machine_id, process_id
) AS subquery
GROUP BY machine_id;

11. Employee Bonus
SELECT e.name, b.bonus
FROM Employee e
LEFT JOIN Bonus b ON e.empId = b.empId
WHERE b.bonus < 1000 OR b.bonus IS NULL;

12. Students and Examinations
SELECT p.product_name, s.year, s.price
FROM Sales s
JOIN Product p ON s.product_id = p.product_id;

13. Managers with at Least 5 Direct Reports
SELECT name
FROM Employee
WHERE id IN (
    SELECT managerId
    FROM Employee
    GROUP BY managerId
    HAVING COUNT(id) >= 5
);

14. Confirmation Rate
SELECT 
    Signups.user_id,
  s  IFNULL(
        ROUND(
            SUM(CASE WHEN Confirmations.action = 'confirmed' THEN 1 ELSE 0 END) / COUNT(Confirmations.user_id),
            2
        ),
        0.00
    ) AS confirmation_rate
FROM 
    Signups
LEFT JOIN 
    Confirmations ON Signups.user_id = Confirmations.user_id
GROUP BY 
    Signups.user_id;

Basic Aggregate Functions

15. Not Boring Movies
SELECT id, movie, description, rating
FROM Cinema
WHERE id % 2 != 0
AND description != 'boring'
ORDER BY rating DESC;

16. Average Selling Price
SELECT u.product_id, ROUND(SUM(u.units * p.price) / SUM(u.units), 2) AS average_price
FROM UnitsSold u
JOIN Prices p ON u.product_id = p.product_id AND u.purchase_date BETWEEN p.start_date AND p.end_date
GROUP BY u.product_id;

17. Project Employees I
SELECT project_id,
ROUND(AVG(experience_years), 2) AS average_years
FROM Project
JOIN Employee ON Project.employee_id = Employee.employee_id
GROUP BY project_id;

18. Percentage of Users Attended a Contest
SELECT contest_id,
ROUND(COUNT(DISTINCT user_id) * 100.0 / (SELECT COUNT(DISTINCT user_id) FROM Register), 2) AS percentage
FROM Register
GROUP BY contest_id
ORDER BY percentage DESC, contest_id ASC;


19. Queries Quality and Percentage
SELECT query_name,
ROUND(AVG(CAST(rating AS DECIMAL) / position), 2) AS quality,
ROUND((SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS poor_query_percentage
FROM Queries
GROUP BY query_name;

20. Monthly Transactions I
SELECT 
    DATE_FORMAT(trans_date, '%Y-%m') AS month,
    country,
    COUNT(*) AS trans_count,
    SUM(CASE WHEN state = 'approved' THEN 1 ELSE 0 END) AS approved_count,
    SUM(amount) AS trans_total_amount,
    SUM(CASE WHEN state = 'approved' THEN amount ELSE 0 END) AS approved_total_amount
FROM Transactions
GROUP BY month, country;

21. Immediate Food Delivery II
WITH FirstOrders AS (
    SELECT customer_id, MIN(order_date) AS first_order_date
    FROM Delivery
    GROUP BY customer_id

SELECT ROUND(CAST(SUM(CASE WHEN d.order_date = fo.first_order_date THEN 1 ELSE 0 END) AS DECIMAL) / COUNT(*) * 100, 2) AS immediate_percentage
FROM FirstOrders fo
JOIN Delivery d ON fo.customer_id = d.customer_id;

22. Game Play Analysis IV
SELECT 
    ROUND(
        SUM(CASE 
                WHEN 
                    EXISTS (SELECT 1 
                            FROM Activity a2 
                            WHERE a1.player_id = a2.player_id 
                            AND a2.event_date = DATE_ADD(a1.event_date, INTERVAL 1 DAY))
                THEN 1 
                ELSE 0 
            END) / COUNT(DISTINCT player_id), 
        2) AS fraction
FROM Activity a1;

Sorting and Grouping

23. Number of Unique Subjects Taught by Each Teacher
SELECT teacher_id, COUNT(DISTINCT subject_id) AS cnt
FROM Teacher
GROUP BY teacher_id;

24. User Activity for the Past 30 Days I
SELECT activity_date AS day, COUNT(DISTINCT user_id) AS active_users
FROM Activity
WHERE activity_date BETWEEN DATE_SUB('2019-07-27', INTERVAL 29 DAY) AND '2019-07-27'
GROUP BY activity_date;

25. Product Sales Analysis III
SELECT product_id, MIN(year) AS first_year, quantity, price
FROM Sales
GROUP BY product_id;

26. Classes More Than 5 Students
SELECT class
FROM Courses
GROUP BY class
HAVING COUNT(student) >= 5;

27. Find Followers Count
SELECT user_id, COUNT(follower_id) AS followers_count
FROM Followers
GROUP BY user_id
ORDER BY user_id;

28. Biggest Single Number
 SELECT MAX(num) AS num
FROM
  (SELECT num
   FROM MyNumbers
   GROUP BY num
   HAVING COUNT(num) = 1) AS single_numbers;

29. Customers Who Bought All Products
SELECT customer_id
FROM Customer
GROUP BY customer_id
HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product);

Advanced Select and Joins

30. The Number of Employees Which Report to Each Employee
SELECT reports_to AS employee_id,e.name,
       COUNT(employee_id) AS reports_count,
       ROUND(AVG(age)) AS average_age
FROM Employees e
JOIN Employees m ON e.reports_to = m.employee_id
GROUP BY reports_to, e.name
ORDER BY reports_to;

31. Primary Department for Each Employee
SELECT employee_id, 
       CASE 
           WHEN COUNT(department_id) = 1 THEN MAX(department_id) 
           ELSE MAX(CASE WHEN primary_flag = 'Y' THEN department_id END) 
       END AS department_id
FROM Employee
GROUP BY employee_id;

32. Triangle Judgement
 SELECT x, y, z,
       CASE
           WHEN x + y > z AND x + z > y AND y + z > x THEN 'Yes'
           ELSE 'No'
       END AS triangle
FROM Triangle;

33. Consecutive Numbers
SELECT DISTINCT l1.num AS ConsecutiveNums
FROM Logs l1, Logs l2, Logs l3
WHERE l1.id = l2.id - 1
  AND l2.id = l3.id - 1
  AND l1.num = l2.num
  AND l2.num = l3.num;

34. Product Price at a Given Date
SELECT product_id, 
       COALESCE(MAX(new_price) FILTER (WHERE change_date <= '2019-08-16'), 10) AS price
FROM Products
GROUP BY product_id;

35. Last Person to fit in the Bus
 SELECT person_name
FROM (
    SELECT 
        person_name,
        SUM(weight) OVER (ORDER BY turn) AS total_weight
    FROM Queue
) AS sub
WHERE total_weight <= 1000
ORDER BY total_weight DESC
LIMIT 1;

36. Count Salary Categories
 SELECT 
    CASE 
        WHEN income < 20000 THEN 'Low Salary'
        WHEN income BETWEEN 20000 AND 50000 THEN 'Average Salary'
        ELSE 'High Salary'
    END AS category,
    COUNT(*) AS accounts_count
FROM 
    Accounts
GROUP BY 
    CASE 
        WHEN income < 20000 THEN 'Low Salary'
        WHEN income BETWEEN 20000 AND 50000 THEN 'Average Salary'
        ELSE 'High Salary'
    END;

Subqueries

37. Employees Whose Manager Left the Company
SELECT e.employee_id
FROM Employees e
LEFT JOIN Employees m ON e.manager_id = m.employee_id
WHERE e.salary < 30000 AND m.employee_id IS NULL
ORDER BY e.employee_id;

38. Exchange Seats
SELECT 
    CASE 
        WHEN id % 2 = 1 AND id < (SELECT MAX(id) FROM Seat) THEN id + 1
        WHEN id % 2 = 0 THEN id - 1
        ELSE id
    END AS id,
    student
FROM Seat
ORDER BY id;

39. Movie Rating 
 SELECT name AS results
FROM Users
WHERE user_id = (
    SELECT user_id
    FROM MovieRating
    GROUP BY user_id
    ORDER BY COUNT(movie_id) DESC, name ASC
    LIMIT 1
);
UNION ALL
SELECT title AS results
FROM Movies
WHERE movie_id = (
    SELECT movie_id
    FROM (
        SELECT movie_id, AVG(rating) AS avg_rating
        FROM MovieRating
        WHERE created_at >= '2020-02-01' AND created_at <= '2020-02-29'
        GROUP BY movie_id
        ORDER BY AVG(rating) DESC, title ASC
        LIMIT 1
    ) AS highest_avg_rating_movie
);

40. Restaurant Growth
SELECT visited_on,
       SUM(amount) AS amount,
       ROUND(AVG(amount) OVER (ORDER BY visited_on ROWS BETWEEN 6 PRECEDING AND CURRENT ROW), 2) AS average_amount
FROM Customer
GROUP BY visited_on
ORDER BY visited_on;

41. Friend Requests II: Who Has the Most Friends
SELECT id, COUNT(*) AS num
FROM
    (SELECT requester_id AS id FROM RequestAccepted
    UNION ALL
    SELECT accepter_id AS id FROM RequestAccepted) AS combined
GROUP BY id
ORDER BY num DESC
LIMIT 1;

42. Investments in 2016
 SELECT ROUND(SUM(tiv_2016), 2) AS tiv_2016
FROM Insurance
WHERE tiv_2015 IN (
   SELECT tiv_2015
    FROM Insurance
    GROUP BY tiv_2015
    HAVING COUNT() > 1
)
AND (lat, lon) NOT IN (
    SELECT lat, lon
    FROM Insurance
    GROUP BY lat, lon
    HAVING COUNT() > 1
);

43. Department Top Three Salaries
 WITH RankedEmployees AS (
    SELECT e.name AS Employee, e.salary AS Salary, d.name AS Department,
           DENSE_RANK() OVER(PARTITION BY e.departmentId ORDER BY e.salary DESC) AS SalaryRank
    FROM Employee e
    JOIN Department d ON e.departmentId = d.id
)
SELECT Department, Employee, Salary
FROM RankedEmployees
WHERE SalaryRank <= 3;



Advanced String Functions/Regex/Clause 

44. Fixed Names in a Table 
SELECT user_id, CONCAT(UPPER(SUBSTRING(name, 1, 1)), LOWER(SUBSTRING(name, 2))) AS name
FROM Users
ORDER BY user_id;

45. Patients Was a Condition 
SELECT patient_id, patient_name, conditions
FROM Patients
WHERE conditions LIKE 'DIAB1%';

46. Delete Duplicate Emails
DELETE p1
FROM Person p1, Person p2
WHERE p1.email = p2.email AND p1.id > p2.id;

47. Second Highest Salary
SELECT MAX(salary) AS SecondHighestSalary
FROM Employee
WHERE salary < (SELECT MAX(salary) FROM Employee);

48. Group Sold Products By The Date 
SELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(product ORDER BY product) AS products
FROM Activities
GROUP BY sell_date
ORDER BY sell_date;

49. List the Products Ordered in a Period
SELECT p.product_name, SUM(o.unit) AS unit
FROM Products p
JOIN Orders o ON p.product_id = o.product_id
WHERE o.order_date BETWEEN '2020-02-01' AND '2020-02-29'
GROUP BY p.product_id, p.product_name
HAVING SUM(o.unit) >= 100;

50. Find Users With Valid Emails
 SELECT *
FROM Users
WHERE mail REGEXP '^[A-Za-z][A-Za-z0-9._-]*@leetcode.com$';

